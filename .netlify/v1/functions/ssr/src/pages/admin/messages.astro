---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Admin Messages - Portfolio Management">
  <div class="min-h-screen bg-slate-50">
    <header class="bg-white shadow-sm border-b border-slate-200">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center h-16">
          <h1 class="text-xl font-bold text-navy-900">Contact Messages</h1>
          <a href="/admin/dashboard" class="text-navy-700 hover:underline">Back to Dashboard</a>
        </div>
      </div>
    </header>
    <main class="max-w-4xl mx-auto py-10 px-4">
      <h2 class="text-2xl font-bold mb-8">Inbox</h2>
      <div id="messagesList" class="space-y-8"></div>
    </main>
  </div>

  <script>
    // Authentication check
    if (!localStorage.getItem('adminToken')) {
      window.location.href = '/admin';
    }
    document.addEventListener('DOMContentLoaded', async () => {
      const messagesList = document.getElementById('messagesList');
      if (!messagesList) return;
      async function loadMessages() {
        if (!messagesList) return;
        messagesList.innerHTML = '';
        try {
          const response = await fetch('/api/admin/messages', {
            headers: { 'Authorization': `Bearer ${localStorage.getItem('adminToken')}` }
          });
          const data = await response.json();
          if (data.messages && data.messages.length > 0) {
            data.messages.forEach((msg: any, idx: any) => {
              const initials = `${msg.firstName?.[0] || ''}${msg.lastName?.[0] || ''}`.toUpperCase();
              const div = document.createElement('div');
              div.className = `message-card${msg.read ? '' : ' unread'}`;
              div.innerHTML = `
                <div class="message-avatar">${initials || '<svg class=\"w-8 h-8\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5.121 17.804A13.937 13.937 0 0112 15c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0z\"></path></svg>'}
                </div>
                <div class="flex-1">
                  <div class="message-header">
                    <span class="message-name">${msg.firstName} ${msg.lastName}</span>
                    <span class="message-timestamp">${new Date(msg.timestamp).toLocaleString()}</span>
                  </div>
                  <div class="message-email">${msg.email}${msg.organization ? ' â€¢ ' + msg.organization : ''}</div>
                  <div class="message-meta"><b>Subject:</b> ${msg.subject}</div>
                  <div class="message-body">${msg.message}</div>
                  <div class="message-actions">
                    <button class="message-read" data-idx="${idx}" ${msg.read ? 'disabled' : ''}>${msg.read ? 'Read' : 'Mark as Read'}</button>
                    <button class="message-delete" data-idx="${idx}">Delete</button>
                  </div>
                </div>
              `;
              if (messagesList) messagesList.appendChild(div);
            });
            document.querySelectorAll('.message-read').forEach(btn => {
              btn.addEventListener('click', async (e) => {
                const idx = btn.getAttribute('data-idx');
                if (idx !== null) {
                  await fetch(`/api/admin/mark-message-read?idx=${idx}`, { method: 'POST', headers: { 'Authorization': `Bearer ${localStorage.getItem('adminToken')}` } });
                  loadMessages();
                }
              });
            });
            document.querySelectorAll('.message-delete').forEach(btn => {
              btn.addEventListener('click', async (e) => {
                const idx = btn.getAttribute('data-idx');
                if (idx !== null && confirm('Are you sure you want to delete this message?')) {
                  await fetch(`/api/admin/delete-message?idx=${idx}`, { method: 'POST', headers: { 'Authorization': `Bearer ${localStorage.getItem('adminToken')}` } });
                  loadMessages();
                }
              });
            });
          } else {
            if (messagesList) messagesList.innerHTML = '<div class="text-gray-500">No messages found.</div>';
          }
        } catch (error) {
          if (messagesList) messagesList.innerHTML = '<div class="text-red-500">Failed to load messages.</div>';
        }
      }
      loadMessages();
    });
  </script>

  <style>
    .message-card {
      @apply flex items-start bg-white rounded-2xl shadow-lg border border-slate-200 p-6 gap-6 relative transition-all duration-300;
    }
    .message-card.unread {
      @apply border-navy-500 bg-navy-50 shadow-xl;
    }
    .message-avatar {
      @apply w-14 h-14 rounded-full bg-navy-100 flex items-center justify-center text-2xl font-bold text-navy-700 shadow;
      min-width: 3.5rem;
    }
    .message-actions {
      @apply flex gap-3 mt-4;
    }
    .message-delete {
      @apply px-4 py-2 rounded-lg border border-red-200 bg-red-50 text-red-700 font-semibold shadow-sm hover:bg-red-100 hover:text-red-800 transition-colors duration-200 text-sm;
    }
    .message-read {
      @apply px-4 py-2 rounded-lg border border-navy-200 bg-white text-navy-700 font-semibold shadow-sm hover:bg-navy-50 hover:text-navy-800 transition-colors duration-200 text-sm;
    }
    .message-header {
      @apply flex justify-between items-center mb-1;
    }
    .message-email {
      @apply text-xs text-gray-500 mb-1;
    }
    .message-body {
      @apply text-gray-800 mt-2 mb-2 text-base;
    }
    .message-meta {
      @apply text-xs text-gray-400 mb-1;
    }
    .message-name {
      @apply font-semibold text-navy-900 text-lg;
    }
    .message-timestamp {
      @apply text-xs text-gray-400 font-mono;
    }
  </style>
</Layout> 