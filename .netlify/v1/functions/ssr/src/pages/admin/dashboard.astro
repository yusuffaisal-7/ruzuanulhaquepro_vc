---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Admin Dashboard - Portfolio Management">
  <div class="min-h-screen bg-slate-50">
    <!-- Header -->
    <header class="bg-white shadow-sm border-b border-slate-200">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center h-16">
          <h1 class="text-xl font-bold text-navy-900">Admin Dashboard</h1>
          <div class="flex items-center space-x-4">
            <button id="logoutBtn" class="text-charcoal-600 hover:text-navy-700 font-medium">
              Logout
            </button>
          </div>
        </div>
      </div>
    </header>

    <!-- Message Panel: Always visible below header -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-8">
      <div class="bg-white rounded-lg shadow p-6 mb-8 border border-navy-100">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-lg font-bold text-navy-900">Recent Messages</h2>
          <a href="/admin/messages" class="text-navy-600 hover:underline text-sm">View all</a>
        </div>
        <ul id="dashboardMessages" class="divide-y divide-slate-200"></ul>
        <div id="noMessages" class="text-gray-500 text-sm mt-4 hidden">No messages yet.</div>
      </div>
    </div>

    <!-- Navigation Tabs -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-8">
      <div class="border-b border-slate-200">
        <nav class="-mb-px flex space-x-8">
          <button class="tab-btn active" data-tab="profile">Profile</button>
          <button class="tab-btn" data-tab="blog">Blog Posts</button>
          <button class="tab-btn" data-tab="research">Research</button>
          <button class="tab-btn" data-tab="images">Images</button>
          <a href="/admin/messages" class="tab-btn">Messages</a>
        </nav>
      </div>
    </div>

    <!-- Content Sections -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- Profile Tab -->
      <div id="profile-tab" class="tab-content">
        <div class="bg-white rounded-lg shadow-sm p-6">
          <h2 class="text-2xl font-bold text-navy-900 mb-6">Profile Information</h2>
          <form id="profileForm" class="space-y-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label class="block text-sm font-medium text-charcoal-700 mb-2">Name</label>
                <input type="text" id="profile-name" class="form-input" />
              </div>
              <div>
                <label class="block text-sm font-medium text-charcoal-700 mb-2">Title</label>
                <input type="text" id="profile-title" class="form-input" />
              </div>
              <div>
                <label class="block text-sm font-medium text-charcoal-700 mb-2">Department</label>
                <input type="text" id="profile-department" class="form-input" />
              </div>
              <div>
                <label class="block text-sm font-medium text-charcoal-700 mb-2">Institution</label>
                <input type="text" id="profile-institution" class="form-input" />
              </div>
              <div>
                <label class="block text-sm font-medium text-charcoal-700 mb-2">Email</label>
                <input type="email" id="profile-email" class="form-input" />
              </div>
              <div>
                <label class="block text-sm font-medium text-charcoal-700 mb-2">Phone</label>
                <input type="text" id="profile-phone" class="form-input" />
              </div>
              <div class="md:col-span-2">
                <label class="block text-sm font-medium text-charcoal-700 mb-2">Profile Image</label>
                <input type="file" id="profile-image" accept="image/*" class="form-input" />
                <div id="profile-image-preview" class="mt-2"></div>
              </div>
              <div class="md:col-span-2">
                <label class="block text-sm font-medium text-charcoal-700 mb-2">Description</label>
                <textarea id="profile-description" rows="3" class="form-input"></textarea>
              </div>
            </div>
            <button type="submit" class="btn-primary">Update Profile</button>
          </form>
        </div>
      </div>

      <!-- Blog Tab -->
      <div id="blog-tab" class="tab-content hidden">
        <div class="bg-white rounded-lg shadow-sm p-6">
          <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold text-navy-900">Blog Posts</h2>
            <button id="addPostBtn" class="btn-primary">Add New Post</button>
          </div>
          <div id="blogList" class="space-y-4"></div>
        </div>
      </div>

      <!-- Research Tab -->
      <div id="research-tab" class="tab-content hidden">
        <div class="bg-white rounded-lg shadow-sm p-6">
          <h2 class="text-2xl font-bold text-navy-900 mb-6">Research & Publications</h2>
          <div class="space-y-8">
            <!-- Research Stats -->
            <div>
              <h3 class="text-lg font-semibold text-navy-800 mb-4">Research Statistics</h3>
              <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div>
                  <label class="block text-sm font-medium text-charcoal-700 mb-2">Publications</label>
                  <input type="text" id="research-publications" class="form-input" />
                </div>
                <div>
                  <label class="block text-sm font-medium text-charcoal-700 mb-2">Citations</label>
                  <input type="text" id="research-citations" class="form-input" />
                </div>
                <div>
                  <label class="block text-sm font-medium text-charcoal-700 mb-2">H-Index</label>
                  <input type="text" id="research-hindex" class="form-input" />
                </div>
                <div>
                  <label class="block text-sm font-medium text-charcoal-700 mb-2">Collaborations</label>
                  <input type="text" id="research-collaborations" class="form-input" />
                </div>
              </div>
            </div>
            
            <!-- Recent Publications -->
            <div>
              <h3 class="text-lg font-semibold text-navy-800 mb-4">Recent Publications</h3>
              <div id="publicationsList" class="space-y-4"></div>
              <button id="addPublicationBtn" class="btn-secondary mt-4">Add Publication</button>
            </div>
          </div>
          <button id="updateResearchBtn" class="btn-primary mt-6">Update Research Data</button>
        </div>
      </div>

      <!-- Images Tab -->
      <div id="images-tab" class="tab-content hidden">
        <div class="bg-white rounded-lg shadow-sm p-6">
          <h2 class="text-2xl font-bold text-navy-900 mb-6">Image Management</h2>
          
          <div class="mb-8">
            <h3 class="text-lg font-semibold text-navy-800 mb-4">Upload New Image</h3>
            <div class="border-2 border-dashed border-gray-300 rounded-lg p-6 hover:border-navy-500 transition-colors">
              <input type="file" id="imageUpload" accept="image/*" class="hidden" />
              <div id="uploadArea" class="text-center cursor-pointer">
                <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                  <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
                <p class="mt-2 text-sm text-gray-600">Click to upload or drag and drop</p>
                <p class="text-xs text-gray-500">PNG, JPG, GIF up to 10MB</p>
              </div>
            </div>
            <div id="uploadProgress" class="hidden mt-4">
              <div class="bg-gray-200 rounded-full h-2">
                <div id="progressBar" class="bg-navy-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
              </div>
              <p id="uploadStatus" class="text-sm text-gray-600 mt-2">Uploading...</p>
            </div>
          </div>

          <div>
            <h3 class="text-lg font-semibold text-navy-800 mb-4">Uploaded Images</h3>
            <div id="imageGallery" class="grid grid-cols-2 md:grid-cols-4 gap-4"></div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Blog Post Modal -->
  <div id="blogModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-white rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-xl font-bold text-navy-900">Edit Blog Post</h3>
        <button id="closeBlogModal" class="text-charcoal-500 hover:text-charcoal-700">
          <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <form id="blogPostForm" class="space-y-4">
        <input type="hidden" id="blog-id" />
        <div>
          <label class="block text-sm font-medium text-charcoal-700 mb-2">Title</label>
          <input type="text" id="blog-title" class="form-input" required />
        </div>
        <div>
          <label class="block text-sm font-medium text-charcoal-700 mb-2">Category</label>
          <input type="text" id="blog-category" class="form-input" required />
        </div>
        <div>
          <label class="block text-sm font-medium text-charcoal-700 mb-2">Image</label>
          <input type="file" id="blog-image" accept="image/*" class="form-input" />
          <div id="blog-image-preview" class="mt-2"></div>
        </div>
        <div>
          <label class="block text-sm font-medium text-charcoal-700 mb-2">Excerpt</label>
          <textarea id="blog-excerpt" rows="3" class="form-input" required></textarea>
        </div>
        <div>
          <label class="block text-sm font-medium text-charcoal-700 mb-2">Content (HTML)</label>
          <textarea id="blog-content" rows="10" class="form-input" required></textarea>
        </div>
        <div class="flex space-x-4">
          <button type="submit" class="btn-primary">Save Post</button>
          <button type="button" id="deleteBlogBtn" class="btn-danger hidden">Delete Post</button>
        </div>
      </form>
    </div>
  </div>
</Layout>

<style>
  .tab-btn {
    @apply py-2 px-1 border-b-2 border-transparent font-medium text-sm text-charcoal-500 hover:text-charcoal-700 hover:border-charcoal-300 transition-colors;
  }
  
  .tab-btn.active {
    @apply border-navy-500 text-navy-600;
  }
  
  .form-input {
    @apply w-full px-3 py-2 border border-charcoal-300 rounded-md focus:ring-2 focus:ring-navy-500 focus:border-navy-500 transition-colors;
  }
  
  .btn-primary {
    @apply bg-navy-700 text-white px-4 py-2 rounded-md font-medium hover:bg-navy-800 transition-colors;
  }
  
  .btn-secondary {
    @apply bg-charcoal-100 text-charcoal-700 px-4 py-2 rounded-md font-medium hover:bg-charcoal-200 transition-colors;
  }
  
  .btn-danger {
    @apply bg-red-600 text-white px-4 py-2 rounded-md font-medium hover:bg-red-700 transition-colors;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Check authentication
    const token = localStorage.getItem('adminToken');
    if (!token) {
      window.location.href = '/admin';
      return;
    }

    // Tab switching
    const tabBtns = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');
    
    tabBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const tabName = (btn as HTMLElement).dataset.tab;
        if (!tabName) return;
        // Update active tab
        tabBtns.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        // Show corresponding content
        tabContents.forEach(content => {
          content.classList.add('hidden');
        });
        const tabContent = document.getElementById(`${tabName}-tab`);
        if (tabContent) tabContent.classList.remove('hidden');
      });
    });

    // Logout
    const logoutBtn = document.getElementById('logoutBtn');
    if (logoutBtn) {
      logoutBtn.addEventListener('click', () => {
      localStorage.removeItem('adminToken');
      window.location.href = '/admin';
    });
    }

    // Load initial data
    loadProfileData();
    loadBlogData();
    loadResearchData();
    loadImages();

    // Form submissions
    setupProfileForm();
    setupBlogModal();
    setupResearchForm();
    setupImageUpload();

    // Dashboard message panel logic
    const dashboardMessages = document.getElementById('dashboardMessages');
    const noMessages = document.getElementById('noMessages');
    async function loadDashboardMessages() {
      try {
        const response = await fetch('/api/admin/messages', {
          headers: { 'Authorization': `Bearer ${localStorage.getItem('adminToken')}` }
        });
        const data = await response.json();
        if (dashboardMessages && data.messages && data.messages.length > 0) {
          dashboardMessages.innerHTML = '';
          data.messages.slice(0, 3).forEach((msg: any) => {
            const li = document.createElement('li');
            li.className = 'py-3 flex items-start gap-4';
            li.innerHTML = `
              <div class="w-10 h-10 rounded-full bg-navy-100 flex items-center justify-center text-lg font-bold text-navy-700">${(msg.firstName?.[0] || '') + (msg.lastName?.[0] || '')}</div>
              <div class="flex-1">
                <div class="flex justify-between items-center">
                  <span class="font-semibold text-navy-900">${msg.firstName} ${msg.lastName}</span>
                  <span class="text-xs text-gray-400">${new Date(msg.timestamp).toLocaleString()}</span>
                </div>
                <div class="text-sm text-gray-700">${msg.subject}</div>
                <div class="text-xs text-gray-500 break-words overflow-hidden" style="display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;">${msg.message}</div>
              </div>
            `;
            dashboardMessages.appendChild(li);
          });
          if (noMessages) noMessages.classList.add('hidden');
        } else {
          if (dashboardMessages) dashboardMessages.innerHTML = '';
          if (noMessages) noMessages.classList.remove('hidden');
        }
      } catch (e) {
        if (dashboardMessages) dashboardMessages.innerHTML = '';
        if (noMessages) noMessages.classList.remove('hidden');
      }
    }
    loadDashboardMessages();
    setInterval(loadDashboardMessages, 10000);
  });

  async function loadProfileData() {
    try {
      const response = await fetch('/api/admin/content');
      const data = await response.json();
      if (data.profile) {
        const nameInput = document.getElementById('profile-name') as HTMLInputElement | null;
        const titleInput = document.getElementById('profile-title') as HTMLInputElement | null;
        const deptInput = document.getElementById('profile-department') as HTMLInputElement | null;
        const instInput = document.getElementById('profile-institution') as HTMLInputElement | null;
        const emailInput = document.getElementById('profile-email') as HTMLInputElement | null;
        const phoneInput = document.getElementById('profile-phone') as HTMLInputElement | null;
        const descInput = document.getElementById('profile-description') as HTMLTextAreaElement | null;
        if (nameInput) nameInput.value = data.profile.name || '';
        if (titleInput) titleInput.value = data.profile.title || '';
        if (deptInput) deptInput.value = data.profile.department || '';
        if (instInput) instInput.value = data.profile.institution || '';
        if (emailInput) emailInput.value = data.profile.email || '';
        if (phoneInput) phoneInput.value = data.profile.phone || '';
        if (descInput) descInput.value = data.profile.description || '';
        if (data.profile.image) {
          const preview = document.getElementById('profile-image-preview');
          if (preview) preview.innerHTML = `<img src="${data.profile.image}" alt="Profile" class="w-20 h-20 object-cover rounded-lg">`;
        }
      }
    } catch (error) {
      console.error('Error loading profile data:', error);
    }
  }

  async function loadBlogData() {
    try {
      const response = await fetch('/api/admin/blog');
      const data = await response.json();
      const blogList = document.getElementById('blogList');
      if (!blogList) return;
      blogList.innerHTML = '';
      if (data.posts && data.posts.length > 0) {
        data.posts.forEach((post: any) => {
          const postElement = document.createElement('div');
          postElement.className = 'border border-charcoal-200 rounded-lg p-4 flex justify-between items-center';
          postElement.innerHTML = `
            <div>
              <h4 class="font-semibold text-navy-900">${post.title}</h4>
              <p class="text-sm text-charcoal-600">${post.category} • ${post.date}</p>
            </div>
            <button class="edit-post-btn btn-secondary" data-id="${post.id}">Edit</button>
          `;
          blogList.appendChild(postElement);
        });
        // Add event listeners for edit buttons
        document.querySelectorAll('.edit-post-btn').forEach(btn => {
          const id = (btn as HTMLElement).dataset.id;
          if (id) {
            (btn as HTMLElement).addEventListener('click', () => editBlogPost(id));
          }
        });
      } else {
        blogList.innerHTML = '<p class="text-gray-500">No blog posts found. Create your first post!</p>';
      }
    } catch (error) {
      console.error('Error loading blog data:', error);
    }
  }

  async function loadResearchData() {
    try {
      const response = await fetch('/api/admin/content');
      const data = await response.json();
      if (data.research) {
        const pubInput = document.getElementById('research-publications') as HTMLInputElement | null;
        const citInput = document.getElementById('research-citations') as HTMLInputElement | null;
        const hIndexInput = document.getElementById('research-hindex') as HTMLInputElement | null;
        const collabInput = document.getElementById('research-collaborations') as HTMLInputElement | null;
        if (pubInput) pubInput.value = data.research.stats.publications || '';
        if (citInput) citInput.value = data.research.stats.citations || '';
        if (hIndexInput) hIndexInput.value = data.research.stats.hIndex || '';
        if (collabInput) collabInput.value = data.research.stats.collaborations || '';
        // Load publications
        const publicationsList = document.getElementById('publicationsList');
        if (publicationsList) {
        publicationsList.innerHTML = '';
        if (data.research.recentPublications) {
            data.research.recentPublications.forEach((pub: any, index: number) => {
            const pubElement = document.createElement('div');
            pubElement.className = 'border border-charcoal-200 rounded-lg p-4';
            pubElement.innerHTML = `
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <input type="text" value="${pub.title || ''}" class="form-input pub-title" data-index="${index}" placeholder="Publication Title" />
                <input type="text" value="${pub.journal || ''}" class="form-input pub-journal" data-index="${index}" placeholder="Journal" />
                <input type="text" value="${pub.year || ''}" class="form-input pub-year" data-index="${index}" placeholder="Year" />
                <input type="text" value="${pub.type || ''}" class="form-input pub-type" data-index="${index}" placeholder="Type" />
              </div>
            `;
            publicationsList.appendChild(pubElement);
          });
          }
        }
      }
    } catch (error) {
      console.error('Error loading research data:', error);
    }
  }

  async function loadImages() {
    try {
      const response = await fetch('/api/admin/images');
      const data = await response.json();
      const gallery = document.getElementById('imageGallery');
      if (!gallery) return;
      gallery.innerHTML = '';
      if (data.images && data.images.length > 0) {
        data.images.forEach((image: any) => {
          const imageElement = document.createElement('div');
          imageElement.className = 'relative group';
          imageElement.innerHTML = `
            <img src="${image.url}" alt="${image.name}" class="w-full h-32 object-cover rounded-lg">
            <div class="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity rounded-lg flex items-center justify-center">
              <button class="copy-url-btn text-white bg-navy-600 px-3 py-1 rounded text-sm mr-2" data-url="${image.url}">Copy URL</button>
              <button class="delete-image-btn text-white bg-red-600 px-3 py-1 rounded text-sm" data-name="${image.name}">Delete</button>
            </div>
            <p class="text-xs text-center mt-1 truncate">${image.originalName || image.name}</p>
          `;
          gallery.appendChild(imageElement);
        });
        // Add event listeners
        document.querySelectorAll('.copy-url-btn').forEach(btn => {
          (btn as HTMLElement).addEventListener('click', () => {
            const url = (btn as HTMLElement).dataset.url;
            if (url) {
              navigator.clipboard.writeText(url);
            btn.textContent = 'Copied!';
            setTimeout(() => btn.textContent = 'Copy URL', 2000);
            }
          });
        });
        document.querySelectorAll('.delete-image-btn').forEach(btn => {
          const name = (btn as HTMLElement).dataset.name;
          if (name) {
            (btn as HTMLElement).addEventListener('click', () => deleteImage(name));
          }
        });
      } else {
        gallery.innerHTML = '<p class="text-gray-500 col-span-full text-center">No images uploaded yet.</p>';
      }
    } catch (error) {
      console.error('Error loading images:', error);
    }
  }

  function setupProfileForm() {
    const profileForm = document.getElementById('profileForm') as HTMLFormElement | null;
    if (!profileForm) return;
    profileForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData();
      const nameInput = document.getElementById('profile-name') as HTMLInputElement | null;
      const titleInput = document.getElementById('profile-title') as HTMLInputElement | null;
      const deptInput = document.getElementById('profile-department') as HTMLInputElement | null;
      const instInput = document.getElementById('profile-institution') as HTMLInputElement | null;
      const emailInput = document.getElementById('profile-email') as HTMLInputElement | null;
      const phoneInput = document.getElementById('profile-phone') as HTMLInputElement | null;
      const descInput = document.getElementById('profile-description') as HTMLTextAreaElement | null;
      if (nameInput) formData.append('name', nameInput.value);
      if (titleInput) formData.append('title', titleInput.value);
      if (deptInput) formData.append('department', deptInput.value);
      if (instInput) formData.append('institution', instInput.value);
      if (emailInput) formData.append('email', emailInput.value);
      if (phoneInput) formData.append('phone', phoneInput.value);
      if (descInput) formData.append('description', descInput.value);
      const imageInput = document.getElementById('profile-image') as HTMLInputElement | null;
      const imageFile = imageInput && imageInput.files ? imageInput.files[0] : null;
      if (imageFile) {
        formData.append('image', imageFile);
      }
      try {
        const response = await fetch('/api/admin/update-profile', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
          },
          body: formData
        });
        const result = await response.json();
        if (response.ok) {
          alert('Profile updated successfully!');
          loadProfileData();
          loadImages(); // Refresh images if new image was uploaded
        } else {
          alert(`Error updating profile: ${result.error}`);
        }
      } catch (error) {
        alert('Network error');
        console.error('Profile update error:', error);
      }
    });
  }

  function setupBlogModal() {
    const modal = document.getElementById('blogModal');
    const addBtn = document.getElementById('addPostBtn');
    const closeBtn = document.getElementById('closeBlogModal');
    const form = document.getElementById('blogPostForm') as HTMLFormElement | null;
    const deleteBtn = document.getElementById('deleteBlogBtn');
    if (addBtn) {
      addBtn.addEventListener('click', () => {
        if (form) form.reset();
        const blogId = document.getElementById('blog-id') as HTMLInputElement | null;
        if (blogId) blogId.value = '';
        const blogImagePreview = document.getElementById('blog-image-preview');
        if (blogImagePreview) blogImagePreview.innerHTML = '';
        if (deleteBtn) deleteBtn.classList.add('hidden');
        if (modal) {
      modal.classList.remove('hidden');
      modal.classList.add('flex');
        }
    });
    }
    if (closeBtn) {
      closeBtn.addEventListener('click', () => {
        if (modal) {
      modal.classList.add('hidden');
      modal.classList.remove('flex');
        }
    });
    }
    if (form) {
      form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData();
        const blogId = document.getElementById('blog-id') as HTMLInputElement | null;
        const blogTitle = document.getElementById('blog-title') as HTMLInputElement | null;
        const blogCategory = document.getElementById('blog-category') as HTMLInputElement | null;
        const blogExcerpt = document.getElementById('blog-excerpt') as HTMLTextAreaElement | null;
        const blogContent = document.getElementById('blog-content') as HTMLTextAreaElement | null;
        if (blogId) formData.append('id', blogId.value);
        if (blogTitle) formData.append('title', blogTitle.value);
        if (blogCategory) formData.append('category', blogCategory.value);
        if (blogExcerpt) formData.append('excerpt', blogExcerpt.value);
        if (blogContent) formData.append('content', blogContent.value);
        const imageInput = document.getElementById('blog-image') as HTMLInputElement | null;
        const imageFile = imageInput && imageInput.files ? imageInput.files[0] : null;
      if (imageFile) {
        formData.append('image', imageFile);
      }
      try {
        const response = await fetch('/api/admin/save-blog', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
          },
          body: formData
        });
        const result = await response.json();
        if (response.ok) {
          alert('Blog post saved successfully!');
            if (modal) {
          modal.classList.add('hidden');
          modal.classList.remove('flex');
            }
          loadBlogData();
          loadImages(); // Refresh images if new image was uploaded
        } else {
          alert(`Error saving blog post: ${result.error}`);
        }
      } catch (error) {
        alert('Network error');
        console.error('Blog save error:', error);
      }
    });
    }
  }

  function setupResearchForm() {
    const updateBtn = document.getElementById('updateResearchBtn');
    if (!updateBtn) return;
    updateBtn.addEventListener('click', async () => {
      const pubInput = document.getElementById('research-publications') as HTMLInputElement | null;
      const citInput = document.getElementById('research-citations') as HTMLInputElement | null;
      const hIndexInput = document.getElementById('research-hindex') as HTMLInputElement | null;
      const collabInput = document.getElementById('research-collaborations') as HTMLInputElement | null;
      const researchData = {
        stats: {
          publications: pubInput ? pubInput.value : '',
          citations: citInput ? citInput.value : '',
          hIndex: hIndexInput ? hIndexInput.value : '',
          collaborations: collabInput ? collabInput.value : ''
        },
        recentPublications: [] as any[]
      };
      // Collect publications data
      document.querySelectorAll('.pub-title').forEach((input, index) => {
        const title = (input as HTMLInputElement).value;
        const journal = (document.querySelector(`.pub-journal[data-index="${index}"]`) as HTMLInputElement | null)?.value || '';
        const year = (document.querySelector(`.pub-year[data-index="${index}"]`) as HTMLInputElement | null)?.value || '';
        const type = (document.querySelector(`.pub-type[data-index="${index}"]`) as HTMLInputElement | null)?.value || '';
        if (title && journal) {
          researchData.recentPublications.push({ title, journal, year, type });
        }
      });
      try {
        const response = await fetch('/api/admin/update-research', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
          },
          body: JSON.stringify(researchData)
        });
        if (response.ok) {
          alert('Research data updated successfully!');
        } else {
          alert('Error updating research data');
        }
      } catch (error) {
        alert('Network error');
        console.error('Research update error:', error);
      }
    });
  }

  function setupImageUpload() {
    const uploadArea = document.getElementById('uploadArea');
    const fileInput = document.getElementById('imageUpload') as HTMLInputElement | null;
    const progressDiv = document.getElementById('uploadProgress');
    const progressBar = document.getElementById('progressBar');
    const uploadStatus = document.getElementById('uploadStatus');
    if (!uploadArea || !fileInput || !progressDiv || !progressBar || !uploadStatus) return;
    uploadArea.addEventListener('click', () => fileInput.click());
    uploadArea.addEventListener('dragover', (e) => {
      e.preventDefault();
      uploadArea.classList.add('border-navy-500');
    });
    uploadArea.addEventListener('dragleave', () => {
      uploadArea.classList.remove('border-navy-500');
    });
    uploadArea.addEventListener('drop', (e) => {
      e.preventDefault();
      uploadArea.classList.remove('border-navy-500');
      const files = e.dataTransfer?.files;
      if (files && files.length > 0) {
        uploadImage(files[0]);
      }
    });
    fileInput.addEventListener('change', (e) => {
      const target = e.target as HTMLInputElement | null;
      if (target && target.files && target.files.length > 0) {
        uploadImage(target.files[0]);
      }
    });
    async function uploadImage(file: File) {
      const formData = new FormData();
      formData.append('image', file);
      if (!progressDiv || !progressBar || !uploadStatus || !fileInput) return;
      progressDiv.classList.remove('hidden');
      progressBar.style.width = '0%';
      uploadStatus.textContent = 'Uploading...';
      // Simulate progress
      let progress = 0;
      const progressInterval = setInterval(() => {
        if (progressBar) progress += 10;
        if (progressBar) progressBar.style.width = `${Math.min(progress, 90)}%`;
      }, 100);
      try {
        const response = await fetch('/api/admin/upload-image', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
          },
          body: formData
        });
        clearInterval(progressInterval);
        if (progressBar) progressBar.style.width = '100%';
        const result = await response.json();
        if (response.ok) {
          if (uploadStatus) uploadStatus.textContent = 'Upload successful!';
          setTimeout(() => {
            if (progressDiv) progressDiv.classList.add('hidden');
            loadImages();
            if (fileInput) fileInput.value = '';
          }, 1000);
        } else {
          if (uploadStatus) uploadStatus.textContent = `Upload failed: ${result.error}`;
          setTimeout(() => {
            if (progressDiv) progressDiv.classList.add('hidden');
          }, 3000);
        }
      } catch (error) {
        clearInterval(progressInterval);
        if (uploadStatus) uploadStatus.textContent = 'Network error during upload';
        setTimeout(() => {
          if (progressDiv) progressDiv.classList.add('hidden');
        }, 3000);
        console.error('Upload error:', error);
      }
    }
  }

  async function editBlogPost(id: string | undefined) {
    if (!id) return;
    try {
      const response = await fetch('/api/admin/blog');
      const data = await response.json();
      const post = data.posts.find((p: any) => p.id === id);
      if (post) {
        const blogId = document.getElementById('blog-id') as HTMLInputElement | null;
        const blogTitle = document.getElementById('blog-title') as HTMLInputElement | null;
        const blogCategory = document.getElementById('blog-category') as HTMLInputElement | null;
        const blogExcerpt = document.getElementById('blog-excerpt') as HTMLTextAreaElement | null;
        const blogContent = document.getElementById('blog-content') as HTMLTextAreaElement | null;
        if (blogId) blogId.value = post.id;
        if (blogTitle) blogTitle.value = post.title;
        if (blogCategory) blogCategory.value = post.category;
        if (blogExcerpt) blogExcerpt.value = post.excerpt;
        if (blogContent) blogContent.value = post.content;
        if (post.image) {
          const preview = document.getElementById('blog-image-preview');
          if (preview) preview.innerHTML = `<img src="${post.image}" alt="Blog Image" class="w-20 h-20 object-cover rounded-lg">`;
        }
        const deleteBtn = document.getElementById('deleteBlogBtn');
        const modal = document.getElementById('blogModal');
        if (deleteBtn) deleteBtn.classList.remove('hidden');
        if (modal) {
          modal.classList.remove('hidden');
          modal.classList.add('flex');
        }
      }
    } catch (error) {
      console.error('Error loading blog post:', error);
    }
  }

  async function deleteImage(imageName: string) {
    if (confirm('Are you sure you want to delete this image?')) {
      try {
        const response = await fetch('/api/admin/delete-image', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
          },
          body: JSON.stringify({ imageName })
        });
        if (response.ok) {
          loadImages();
        } else {
          alert('Error deleting image');
        }
      } catch (error) {
        alert('Network error');
        console.error('Delete error:', error);
      }
    }
  }
</script>